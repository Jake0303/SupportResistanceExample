//Support Resistance Code with NinjaTrader
//Jacob Amaral Youtube
#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators
{
		
	public class SupportResistance : Indicator
	{
		protected override void OnStateChange()
		{
			
			if (State == State.SetDefaults)
			{
				Description									= @"Draws nearest level of S/R lines above and below current market based on historical price swing High/Low pivots";
				Name										= "SupportResistance";
				Calculate									= Calculate.OnBarClose;
				IsOverlay									= true;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				IsSuspendedWhileInactive					= true;
				MaxLookBackBars								= 4;
				ColorBelow									= Brushes.SeaGreen;
				ColorAbove									= Brushes.LightCoral;
				AddPlot(ColorBelow,		"Support");
				AddPlot(ColorAbove,		"Resistance");
			}
			else if (State == State.Configure)
			{
			}
			else if (State == State.DataLoaded) {
			}
		}
		

		protected override void OnBarUpdate()
		{
			if ( CurrentBar < MaxLookBackBars+1 ) 
				return;
			
			//Calc Resistance
			if (HighestBar(High, MaxLookBackBars+1) == MaxLookBackBars)
			{
				Resistance[0] = High[MaxLookBackBars];
			}
			else if (Resistance.IsValidDataPoint(1))
			{
				Resistance[0] = Resistance[1];
			}
			//Calc Support
			if (LowestBar(Low, MaxLookBackBars+1) == MaxLookBackBars)
			{
				Support[0] = Low[MaxLookBackBars];
			}
			else if (Support.IsValidDataPoint(1))
			{
				Support[0] = Support[1];
			}
		}
		
		#region Properties


		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="Max Look Back Bars", Description = "Max Number of Bars to Look Back for calculations", Order=2, GroupName="Parameters")]
		public int MaxLookBackBars
		{ get; set; }

		[NinjaScriptProperty]
		[XmlIgnore]
		[Display(Name="S/R Zone Color", Order=7, GroupName="Parameters")]
		public Brush ColorBelow
		{ get; set; }

		[Browsable(false)]
		public string ColorBelowSerializable
		{
			get { return Serialize.BrushToString(ColorBelow); }
			set { ColorBelow = Serialize.StringToBrush(value); }
		}			

		[NinjaScriptProperty]
		[XmlIgnore]
		[Display(Name="Resistance Zone Color", Order=8, GroupName="Parameters")]
		public Brush ColorAbove
		{ get; set; }

		[Browsable(false)]
		public string ColorAboveSerializable
		{
			get { return Serialize.BrushToString(ColorAbove); }
			set { ColorAbove = Serialize.StringToBrush(value); }
		}	
		[Browsable(false)]
		[XmlIgnore()]
		public Series<double> Support
		{
			get { Update();return Values[0]; }
		}

		[Browsable(false)]
		[XmlIgnore()]
		public Series<double> Resistance
		{
			get { Update();return Values[1]; }
		}
		#endregion

	}
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private SupportResistance[] cacheSupportResistance;
		public SupportResistance SupportResistance(int maxLookBackBars, Brush colorBelow, Brush colorAbove)
		{
			return SupportResistance(Input, maxLookBackBars, colorBelow, colorAbove);
		}

		public SupportResistance SupportResistance(ISeries<double> input, int maxLookBackBars, Brush colorBelow, Brush colorAbove)
		{
			if (cacheSupportResistance != null)
				for (int idx = 0; idx < cacheSupportResistance.Length; idx++)
					if (cacheSupportResistance[idx] != null && cacheSupportResistance[idx].MaxLookBackBars == maxLookBackBars && cacheSupportResistance[idx].ColorBelow == colorBelow && cacheSupportResistance[idx].ColorAbove == colorAbove && cacheSupportResistance[idx].EqualsInput(input))
						return cacheSupportResistance[idx];
			return CacheIndicator<SupportResistance>(new SupportResistance(){ MaxLookBackBars = maxLookBackBars, ColorBelow = colorBelow, ColorAbove = colorAbove }, input, ref cacheSupportResistance);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.SupportResistance SupportResistance(int maxLookBackBars, Brush colorBelow, Brush colorAbove)
		{
			return indicator.SupportResistance(Input, maxLookBackBars, colorBelow, colorAbove);
		}

		public Indicators.SupportResistance SupportResistance(ISeries<double> input , int maxLookBackBars, Brush colorBelow, Brush colorAbove)
		{
			return indicator.SupportResistance(input, maxLookBackBars, colorBelow, colorAbove);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.SupportResistance SupportResistance(int maxLookBackBars, Brush colorBelow, Brush colorAbove)
		{
			return indicator.SupportResistance(Input, maxLookBackBars, colorBelow, colorAbove);
		}

		public Indicators.SupportResistance SupportResistance(ISeries<double> input , int maxLookBackBars, Brush colorBelow, Brush colorAbove)
		{
			return indicator.SupportResistance(input, maxLookBackBars, colorBelow, colorAbove);
		}
	}
}

#endregion
